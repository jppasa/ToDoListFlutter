// Mocks generated by Mockito 5.4.0 from annotations
// in todo_list/test/domain/feature/todo_list/add_todo_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_list/data/data_state.dart' as _i2;
import 'package:todo_list/domain/models/responses/delete_todo_response.dart'
    as _i8;
import 'package:todo_list/domain/models/responses/fetch_todo_list_response.dart'
    as _i5;
import 'package:todo_list/domain/models/responses/upload_todo_response.dart'
    as _i6;
import 'package:todo_list/domain/models/todo.dart' as _i7;
import 'package:todo_list/domain/repositories/api_repository.dart' as _i3;
import 'package:todo_list/domain/repositories/db_repository.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiRepository extends _i1.Mock implements _i3.ApiRepository {
  @override
  _i4.Future<_i2.DataState<_i5.FetchToDoListResponse>> getToDoList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getToDoList,
          [],
        ),
        returnValue: _i4.Future<_i2.DataState<_i5.FetchToDoListResponse>>.value(
            _FakeDataState_0<_i5.FetchToDoListResponse>(
          this,
          Invocation.method(
            #getToDoList,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DataState<_i5.FetchToDoListResponse>>.value(
                _FakeDataState_0<_i5.FetchToDoListResponse>(
          this,
          Invocation.method(
            #getToDoList,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i5.FetchToDoListResponse>>);
  @override
  _i4.Future<_i2.DataState<_i6.UploadToDoResponse>> uploadTodo(
          _i7.ToDo? toDo) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadTodo,
          [toDo],
        ),
        returnValue: _i4.Future<_i2.DataState<_i6.UploadToDoResponse>>.value(
            _FakeDataState_0<_i6.UploadToDoResponse>(
          this,
          Invocation.method(
            #uploadTodo,
            [toDo],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DataState<_i6.UploadToDoResponse>>.value(
                _FakeDataState_0<_i6.UploadToDoResponse>(
          this,
          Invocation.method(
            #uploadTodo,
            [toDo],
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i6.UploadToDoResponse>>);
  @override
  _i4.Future<_i2.DataState<_i8.DeleteToDoResponse>> deleteTodo(
          _i7.ToDo? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todo],
        ),
        returnValue: _i4.Future<_i2.DataState<_i8.DeleteToDoResponse>>.value(
            _FakeDataState_0<_i8.DeleteToDoResponse>(
          this,
          Invocation.method(
            #deleteTodo,
            [todo],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DataState<_i8.DeleteToDoResponse>>.value(
                _FakeDataState_0<_i8.DeleteToDoResponse>(
          this,
          Invocation.method(
            #deleteTodo,
            [todo],
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i8.DeleteToDoResponse>>);
}

/// A class which mocks [DbRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbRepository extends _i1.Mock implements _i9.DbRepository {
  @override
  _i4.Stream<List<_i7.ToDo>> getToDosAsStream() => (super.noSuchMethod(
        Invocation.method(
          #getToDosAsStream,
          [],
        ),
        returnValue: _i4.Stream<List<_i7.ToDo>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i7.ToDo>>.empty(),
      ) as _i4.Stream<List<_i7.ToDo>>);
  @override
  _i4.Future<_i7.ToDo?> getToDoById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getToDoById,
          [id],
        ),
        returnValue: _i4.Future<_i7.ToDo?>.value(),
        returnValueForMissingStub: _i4.Future<_i7.ToDo?>.value(),
      ) as _i4.Future<_i7.ToDo?>);
  @override
  _i4.Future<int> storeToDo(_i7.ToDo? toDo) => (super.noSuchMethod(
        Invocation.method(
          #storeToDo,
          [toDo],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<void> updateToDo(_i7.ToDo? toDo) => (super.noSuchMethod(
        Invocation.method(
          #updateToDo,
          [toDo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setToDoAsDeleted(_i7.ToDo? toDo) => (super.noSuchMethod(
        Invocation.method(
          #setToDoAsDeleted,
          [toDo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setToDoAsSyncedById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #setToDoAsSyncedById,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> updateAll(List<_i7.ToDo>? todos) => (super.noSuchMethod(
        Invocation.method(
          #updateAll,
          [todos],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> delete(_i7.ToDo? todo) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [todo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
